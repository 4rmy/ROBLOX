{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is this? This is a developer resource that helps you build scripts that involve any sort of ESP. This includes Item ESP and Player ESP. Source The source can be found here","title":"Home"},{"location":"#what-is-this","text":"This is a developer resource that helps you build scripts that involve any sort of ESP. This includes Item ESP and Player ESP.","title":"What is this?"},{"location":"#source","text":"The source can be found here","title":"Source"},{"location":"APIReference/Creation/Box/","text":"ESP:Box << Box > Object > ESP : Box ( < table > Data ) Creates a new ESP Box Object. Parameters table Data A table that configures the new ESP Box Object. Field Type Description Model Instance (Model / Part) Despite being called Model , you may also supply a part to it as well Data ObjectData This is the data for the Drawing Object, please only supply valid indexes or it will break ObjectData Please refer to this for the possible indexes and values you can put for ObjectData Returns Box Object Source","title":"Box"},{"location":"APIReference/Creation/Box/#espbox","text":"<< Box > Object > ESP : Box ( < table > Data ) Creates a new ESP Box Object.","title":"ESP:Box"},{"location":"APIReference/Creation/Box/#parameters","text":"table Data A table that configures the new ESP Box Object. Field Type Description Model Instance (Model / Part) Despite being called Model , you may also supply a part to it as well Data ObjectData This is the data for the Drawing Object, please only supply valid indexes or it will break","title":"Parameters"},{"location":"APIReference/Creation/Box/#objectdata","text":"Please refer to this for the possible indexes and values you can put for ObjectData","title":"ObjectData"},{"location":"APIReference/Creation/Box/#returns","text":"Box Object Source","title":"Returns"},{"location":"APIReference/Creation/Header/","text":"ESP:Header << Header > Object > ESP : Header ( < table > Data ) Creates a new ESP Header Object. Parameters table Data A table that configures the new ESP Header Object. Field Type Description Model Instance (Model / Part) Despite being called Model , you may also supply a part to it as well Data ObjectData This is the data for the Drawing Object, please only supply valid indexes or it will break ObjectData Please refer to this for the possible indexes and values you can put for ObjectData Returns Header Object Source","title":"Header"},{"location":"APIReference/Creation/Header/#espheader","text":"<< Header > Object > ESP : Header ( < table > Data ) Creates a new ESP Header Object.","title":"ESP:Header"},{"location":"APIReference/Creation/Header/#parameters","text":"table Data A table that configures the new ESP Header Object. Field Type Description Model Instance (Model / Part) Despite being called Model , you may also supply a part to it as well Data ObjectData This is the data for the Drawing Object, please only supply valid indexes or it will break","title":"Parameters"},{"location":"APIReference/Creation/Header/#objectdata","text":"Please refer to this for the possible indexes and values you can put for ObjectData","title":"ObjectData"},{"location":"APIReference/Creation/Header/#returns","text":"Header Object Source","title":"Returns"},{"location":"APIReference/Creation/Tracer/","text":"ESP:Tracer << Tracer > Object > ESP : Tracer ( < table > Data ) Creates a new ESP Tracer Object. Parameters table Data A table that configures the new ESP Tracer Object. Field Type Description Model Instance (Model / Part) Despite being called Model , you may also supply a part to it as well Data ObjectData This is the data for the Drawing Object, please only supply valid indexes or it will break ObjectData Please refer to this for the possible indexes and values you can put for ObjectData Returns Tracer Object Source","title":"Tracer"},{"location":"APIReference/Creation/Tracer/#esptracer","text":"<< Tracer > Object > ESP : Tracer ( < table > Data ) Creates a new ESP Tracer Object.","title":"ESP:Tracer"},{"location":"APIReference/Creation/Tracer/#parameters","text":"table Data A table that configures the new ESP Tracer Object. Field Type Description Model Instance (Model / Part) Despite being called Model , you may also supply a part to it as well Data ObjectData This is the data for the Drawing Object, please only supply valid indexes or it will break","title":"Parameters"},{"location":"APIReference/Creation/Tracer/#objectdata","text":"Please refer to this for the possible indexes and values you can put for ObjectData","title":"ObjectData"},{"location":"APIReference/Creation/Tracer/#returns","text":"Tracer Object Source","title":"Returns"},{"location":"APIReference/Update/IsOnScreen/","text":"ESP:IsOnScreen < void > ESPObject : IsOnScreen ( < void > ) This sets the ESP Object 's visibility upon whether the center of the ESP Object is on screen and disregards whether it is within your line of sight. Uses GetCenter Update Note In order for this to work, the Model index must be set within the ESPObject 's Data . Returns nil Source","title":"IsOnScreen"},{"location":"APIReference/Update/IsOnScreen/#espisonscreen","text":"< void > ESPObject : IsOnScreen ( < void > ) This sets the ESP Object 's visibility upon whether the center of the ESP Object is on screen and disregards whether it is within your line of sight.","title":"ESP:IsOnScreen"},{"location":"APIReference/Update/IsOnScreen/#uses","text":"GetCenter Update","title":"Uses"},{"location":"APIReference/Update/IsOnScreen/#note","text":"In order for this to work, the Model index must be set within the ESPObject 's Data .","title":"Note"},{"location":"APIReference/Update/IsOnScreen/#returns","text":"nil Source","title":"Returns"},{"location":"APIReference/Update/IsVisible/","text":"ESP:IsVisible < void > ESPObject : IsVisible ( < void > ) This sets the ESP Object 's visibility upon whether the center of the ESP Object is within your line of sight Uses GetCenter IsVisible Update Note In order for this to work, the Model index must be set within the ESPObject 's Data . Returns nil Source","title":"IsVisible"},{"location":"APIReference/Update/IsVisible/#espisvisible","text":"< void > ESPObject : IsVisible ( < void > ) This sets the ESP Object 's visibility upon whether the center of the ESP Object is within your line of sight","title":"ESP:IsVisible"},{"location":"APIReference/Update/IsVisible/#uses","text":"GetCenter IsVisible Update","title":"Uses"},{"location":"APIReference/Update/IsVisible/#note","text":"In order for this to work, the Model index must be set within the ESPObject 's Data .","title":"Note"},{"location":"APIReference/Update/IsVisible/#returns","text":"nil Source","title":"Returns"},{"location":"APIReference/Update/Update/","text":"ESP:Update < void > ESP : Update ( < table > Data ) This allows you to modify the data within the ESP Object and have it update. Parameters table Data For these values, please refer to the creation section for that specific ESP Object Returns table Data This is the modified data Source This does not have a set source but can be seen after the Management comment within the ESP Object 's creation method","title":"Update"},{"location":"APIReference/Update/Update/#espupdate","text":"< void > ESP : Update ( < table > Data ) This allows you to modify the data within the ESP Object and have it update.","title":"ESP:Update"},{"location":"APIReference/Update/Update/#parameters","text":"table Data For these values, please refer to the creation section for that specific ESP Object","title":"Parameters"},{"location":"APIReference/Update/Update/#returns","text":"table Data This is the modified data","title":"Returns"},{"location":"APIReference/Update/Update/#source","text":"This does not have a set source but can be seen after the Management comment within the ESP Object 's creation method","title":"Source"},{"location":"APIReference/Utilities/BehindPosition/","text":"ESP.Utilites.BehindPosition << Vector3 > Position > ESP . Utilites . BehindPosition ( < Vector3 > TargetPosition ) This returns the position of the TargetPosition relative to your screen, and factors in if they are behind. Parameters Vector3 TargetPosition The position you want to get relative to your screen Returns Vector3 Position Make sure you do Vector2.new(Position.X, Position.Y) , the reason for it being Vector3 is because of what Camera.WorldToViewportPoint returns Source","title":"BehindPosition"},{"location":"APIReference/Utilities/BehindPosition/#esputilitesbehindposition","text":"<< Vector3 > Position > ESP . Utilites . BehindPosition ( < Vector3 > TargetPosition ) This returns the position of the TargetPosition relative to your screen, and factors in if they are behind.","title":"ESP.Utilites.BehindPosition"},{"location":"APIReference/Utilities/BehindPosition/#parameters","text":"Vector3 TargetPosition The position you want to get relative to your screen","title":"Parameters"},{"location":"APIReference/Utilities/BehindPosition/#returns","text":"Vector3 Position Make sure you do Vector2.new(Position.X, Position.Y) , the reason for it being Vector3 is because of what Camera.WorldToViewportPoint returns Source","title":"Returns"},{"location":"APIReference/Utilities/GetCenter/","text":"ESP.Utilites.GetCenter << Vector3 > Position > ESP . Utilites . GetCenter ( < Instance > Object ) This returns the center position of the Object . Parameters Vector3 Object The object you want to get the center of Returns Vector3 Position Source","title":"GetCenter"},{"location":"APIReference/Utilities/GetCenter/#esputilitesgetcenter","text":"<< Vector3 > Position > ESP . Utilites . GetCenter ( < Instance > Object ) This returns the center position of the Object .","title":"ESP.Utilites.GetCenter"},{"location":"APIReference/Utilities/GetCenter/#parameters","text":"Vector3 Object The object you want to get the center of","title":"Parameters"},{"location":"APIReference/Utilities/GetCenter/#returns","text":"Vector3 Position Source","title":"Returns"},{"location":"APIReference/Utilities/IsVisible/","text":"ESP.Utilites.IsVisible << Vector3 > Position > ESP . Utilites . IsVisible ( < Vector3 > TargetPosition ) This whether the center of the TargetPosition is within line of sight. This casts a ray to the TargetPosition and sees if the place the ray hits is the TargetPosition . Parameters Vector3 TargetPosition The position you want see if it is visible to you Returns boolean Visible Instance PartHit This is the part the ray hit, just in case. Source","title":"IsVisible"},{"location":"APIReference/Utilities/IsVisible/#esputilitesisvisible","text":"<< Vector3 > Position > ESP . Utilites . IsVisible ( < Vector3 > TargetPosition ) This whether the center of the TargetPosition is within line of sight. This casts a ray to the TargetPosition and sees if the place the ray hits is the TargetPosition .","title":"ESP.Utilites.IsVisible"},{"location":"APIReference/Utilities/IsVisible/#parameters","text":"Vector3 TargetPosition The position you want see if it is visible to you","title":"Parameters"},{"location":"APIReference/Utilities/IsVisible/#returns","text":"boolean Visible Instance PartHit This is the part the ray hit, just in case. Source","title":"Returns"},{"location":"Examples/PlayerESP/","text":"Example Here is an example Player ESP, it should work on majority of games that do not use a custom character. -- // Dependencies local ESP = loadstring ( game : HttpGet ( \"https://raw.githubusercontent.com/Stefanuk12/ROBLOX/master/Universal/ESP/Rewrite.lua\" ))() -- // Services local Players = game : GetService ( \"Players\" ) local RunService = game : GetService ( \"RunService\" ) -- // Vars local LocalPlayer = Players . LocalPlayer local Manager = {} -- // Contains every player -- // Get character local getCharacter = function ( Player ) local Character = Player . Character if ( Character ) then return Character , Character . PrimaryPart end end -- // Initialise ESP for that player local initialisePlayer = function ( Player ) -- // Create the ESP Objects local Box = ESP : Box ({ Model = Player . Character }) local Header = ESP : Header ({ Model = Player . Character }) local Tracer = ESP : Tracer ({ Model = Player . Character }) -- // Add to manager table.insert ( Manager , { Player , { Box , Header , Tracer }}) end -- // Deinitialise ESP for that player local deinitialisePlayer = function ( Player ) -- // Find player in manager for i , Object in ipairs ( Manager ) do -- // Check for player if not ( Object [ 1 ] == Player ) then continue end -- // Remove each object local ESPObjects = Object [ 2 ] for _ , ESPObject in ipairs ( ESPObjects ) do ESPObject : Remove () end -- // Remove from table table.remove ( Manager , i ) -- // Break break end end -- // Initialise for existing players do local AllPlayers = game : GetService ( \"Players\" ): GetPlayers () for _ , Player in ipairs ( AllPlayers ) do -- // Skip LocalPlayer if ( Player == LocalPlayer ) then continue end -- // Initialise the player initialisePlayer ( Player ) end end -- // Initialise for new players Players . PlayerAdded : Connect ( initialisePlayer ) -- // Deinitialise left players Players . PlayerRemoving : Connect ( deinitialisePlayer ) -- // Update loop RunService : BindToRenderStep ( \"ESPUpdate\" , 0 , function () -- // Loop through manager for _ , Object in ipairs ( Manager ) do local Character = getCharacter ( Object [ 1 ]) -- // Update every ESP Object local ESPObjects = Object [ 2 ] for _ , ESPObject in ipairs ( ESPObjects ) do ESPObject : Update ({ Model = Character }) end end end )","title":"PlayerESP"},{"location":"Examples/PlayerESP/#example","text":"Here is an example Player ESP, it should work on majority of games that do not use a custom character. -- // Dependencies local ESP = loadstring ( game : HttpGet ( \"https://raw.githubusercontent.com/Stefanuk12/ROBLOX/master/Universal/ESP/Rewrite.lua\" ))() -- // Services local Players = game : GetService ( \"Players\" ) local RunService = game : GetService ( \"RunService\" ) -- // Vars local LocalPlayer = Players . LocalPlayer local Manager = {} -- // Contains every player -- // Get character local getCharacter = function ( Player ) local Character = Player . Character if ( Character ) then return Character , Character . PrimaryPart end end -- // Initialise ESP for that player local initialisePlayer = function ( Player ) -- // Create the ESP Objects local Box = ESP : Box ({ Model = Player . Character }) local Header = ESP : Header ({ Model = Player . Character }) local Tracer = ESP : Tracer ({ Model = Player . Character }) -- // Add to manager table.insert ( Manager , { Player , { Box , Header , Tracer }}) end -- // Deinitialise ESP for that player local deinitialisePlayer = function ( Player ) -- // Find player in manager for i , Object in ipairs ( Manager ) do -- // Check for player if not ( Object [ 1 ] == Player ) then continue end -- // Remove each object local ESPObjects = Object [ 2 ] for _ , ESPObject in ipairs ( ESPObjects ) do ESPObject : Remove () end -- // Remove from table table.remove ( Manager , i ) -- // Break break end end -- // Initialise for existing players do local AllPlayers = game : GetService ( \"Players\" ): GetPlayers () for _ , Player in ipairs ( AllPlayers ) do -- // Skip LocalPlayer if ( Player == LocalPlayer ) then continue end -- // Initialise the player initialisePlayer ( Player ) end end -- // Initialise for new players Players . PlayerAdded : Connect ( initialisePlayer ) -- // Deinitialise left players Players . PlayerRemoving : Connect ( deinitialisePlayer ) -- // Update loop RunService : BindToRenderStep ( \"ESPUpdate\" , 0 , function () -- // Loop through manager for _ , Object in ipairs ( Manager ) do local Character = getCharacter ( Object [ 1 ]) -- // Update every ESP Object local ESPObjects = Object [ 2 ] for _ , ESPObject in ipairs ( ESPObjects ) do ESPObject : Update ({ Model = Character }) end end end )","title":"Example"}]}