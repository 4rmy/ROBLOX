{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is this? This is a developer resource that helps you make chat commands easily while allowing rigid typings. This uses classes Sometimes you may see the parameter self . This does not mean you have to always put self there, you can do Object:Function(...) instead of Object.Function(Object, ...) Source The source can be found here","title":"Home"},{"location":"#what-is-this","text":"This is a developer resource that helps you make chat commands easily while allowing rigid typings. This uses classes Sometimes you may see the parameter self . This does not mean you have to always put self there, you can do Object:Function(...) instead of Object.Function(Object, ...)","title":"What is this?"},{"location":"#source","text":"The source can be found here","title":"Source"},{"location":"APIReference/Handler/add/","text":"CommandHandler.AddCommand << nil > nil > CommandHandler . AddCommand ( < CommandHandler > self , < Command > Command ) You use this to register a command to the handler Parameters CommandHandler Handler The command handler you wish to register the command to Command Command The command to register Returns nil nil Source","title":"AddCommand"},{"location":"APIReference/Handler/add/#commandhandleraddcommand","text":"<< nil > nil > CommandHandler . AddCommand ( < CommandHandler > self , < Command > Command ) You use this to register a command to the handler","title":"CommandHandler.AddCommand"},{"location":"APIReference/Handler/add/#parameters","text":"CommandHandler Handler The command handler you wish to register the command to Command Command The command to register","title":"Parameters"},{"location":"APIReference/Handler/add/#returns","text":"nil nil Source","title":"Returns"},{"location":"APIReference/Handler/chatlisten/","text":"CommandHandler.StartChatListen << nil > nil > CommandHandler . StartChatListen ( < CommandHandler > self ) This starts the handler. It listens to every message chatted by every user and executes a command if they said one. How this works It passes the message to CommandHandler.Execute Parameters CommandHandler Handler The command handler Returns nil nil Source","title":"StartChatListen"},{"location":"APIReference/Handler/chatlisten/#commandhandlerstartchatlisten","text":"<< nil > nil > CommandHandler . StartChatListen ( < CommandHandler > self ) This starts the handler. It listens to every message chatted by every user and executes a command if they said one. How this works It passes the message to CommandHandler.Execute","title":"CommandHandler.StartChatListen"},{"location":"APIReference/Handler/chatlisten/#parameters","text":"CommandHandler Handler The command handler","title":"Parameters"},{"location":"APIReference/Handler/chatlisten/#returns","text":"nil nil Source","title":"Returns"},{"location":"APIReference/Handler/checkuser/","text":"CommandHandler.CheckUser << boolean > Allowed > CommandHandler . CheckUser ( < CommandHandler > self , < Player > User ) Check if a user is whitelisted/blacklisted Parameters CommandHandler Handler The command handler Player User The user to check against Returns boolean Allowed Whether the user has passed the check and is authorised. Source","title":"CheckUser"},{"location":"APIReference/Handler/checkuser/#commandhandlercheckuser","text":"<< boolean > Allowed > CommandHandler . CheckUser ( < CommandHandler > self , < Player > User ) Check if a user is whitelisted/blacklisted","title":"CommandHandler.CheckUser"},{"location":"APIReference/Handler/checkuser/#parameters","text":"CommandHandler Handler The command handler Player User The user to check against","title":"Parameters"},{"location":"APIReference/Handler/checkuser/#returns","text":"boolean Allowed Whether the user has passed the check and is authorised. Source","title":"Returns"},{"location":"APIReference/Handler/constructor/","text":"CommandHandler.new << CommandHandler > Handler > CommandHandler . new ( < CommandHandlerData > Data ) You use this to create a new command handler instance Parameters CommandHandlerData Data There is a lot of things you may configure | Name | Description | Type | Default | Required | | ------------ | ----------------------------------------------------- | --------------- | ------------- | -------- | | Members | These are the allowed/disallowed players | Player[] | {LocalPlayer} | NO | | MemberType | Can either be Whitelist or Blacklist | string | Whitelist | NO | | ArgSeperator | This is what seperates each argument out | string | | NO | | Commands | Holds all of the commands registered to this handler | Command[] | {} | NO | | Prefix | What the command has to start with in order to be one | string/string[] | ! | NO | Returns CommandHandler Handler The created handler Source","title":"Constructor"},{"location":"APIReference/Handler/constructor/#commandhandlernew","text":"<< CommandHandler > Handler > CommandHandler . new ( < CommandHandlerData > Data ) You use this to create a new command handler instance","title":"CommandHandler.new"},{"location":"APIReference/Handler/constructor/#parameters","text":"CommandHandlerData Data There is a lot of things you may configure | Name | Description | Type | Default | Required | | ------------ | ----------------------------------------------------- | --------------- | ------------- | -------- | | Members | These are the allowed/disallowed players | Player[] | {LocalPlayer} | NO | | MemberType | Can either be Whitelist or Blacklist | string | Whitelist | NO | | ArgSeperator | This is what seperates each argument out | string | | NO | | Commands | Holds all of the commands registered to this handler | Command[] | {} | NO | | Prefix | What the command has to start with in order to be one | string/string[] | ! | NO |","title":"Parameters"},{"location":"APIReference/Handler/constructor/#returns","text":"CommandHandler Handler The created handler Source","title":"Returns"},{"location":"APIReference/Handler/execute/","text":"CommandHandler.Execute << nil > nil > CommandHandler . Execute ( < CommandHandler > self , < Player > ExecutePlayer , < string > Message ) Execute a command Parameters CommandHandler Handler The command handler Player ExecutePlayer The player who executed the command string Message The message the player said Returns nil nil Source","title":"Execute"},{"location":"APIReference/Handler/execute/#commandhandlerexecute","text":"<< nil > nil > CommandHandler . Execute ( < CommandHandler > self , < Player > ExecutePlayer , < string > Message ) Execute a command","title":"CommandHandler.Execute"},{"location":"APIReference/Handler/execute/#parameters","text":"CommandHandler Handler The command handler Player ExecutePlayer The player who executed the command string Message The message the player said","title":"Parameters"},{"location":"APIReference/Handler/execute/#returns","text":"nil nil Source","title":"Returns"},{"location":"APIReference/Handler/helpmenu/","text":"CommandHandler.HelpMenu << string > HelpMenu > CommandHandler . HelpMenu ( < CommandHandler > self ) This generates a help menu you can use. Here is an example output: :kill :m :h Parameters CommandHandler Handler The command handler Returns string HelpMenu Explained above Source","title":"HelpMenu"},{"location":"APIReference/Handler/helpmenu/#commandhandlerhelpmenu","text":"<< string > HelpMenu > CommandHandler . HelpMenu ( < CommandHandler > self ) This generates a help menu you can use. Here is an example output: :kill :m :h","title":"CommandHandler.HelpMenu"},{"location":"APIReference/Handler/helpmenu/#parameters","text":"CommandHandler Handler The command handler","title":"Parameters"},{"location":"APIReference/Handler/helpmenu/#returns","text":"string HelpMenu Explained above Source","title":"Returns"},{"location":"Examples/","text":"Example Test This is what I use to test the script is working. -- // Dependencies local CommandHandler , CommandClass = loadstring ( game : HttpGet ( \"https://raw.githubusercontent.com/Stefanuk12/ROBLOX/master/Universal/Commands/Module.lua\" ))() -- // Create a handler local Handler = CommandHandler . new ({ Prefix = \".\" }) -- // Create a command CommandClass . new ({ Name = { \"stringtest\" }, Description = \"Test\" , ArgParse = { \"string\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"booleantest\" }, Description = \"Test\" , ArgParse = { \"boolean\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"numbertest\" }, Description = \"Test\" , ArgParse = { \"number\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"colorrgbtest\" }, Description = \"Test\" , ArgParse = { \"colorrgb\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"playertest\" }, Description = \"Test\" , ArgParse = { \"player\" }, TargetSeperator = \",\" Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"misctest\" }, Description = \"Test\" , ArgParse = { \"fdsfiuhdsji\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) -- // Handler : StartChatListen ()","title":"Index"},{"location":"Examples/#example","text":"Test This is what I use to test the script is working. -- // Dependencies local CommandHandler , CommandClass = loadstring ( game : HttpGet ( \"https://raw.githubusercontent.com/Stefanuk12/ROBLOX/master/Universal/Commands/Module.lua\" ))() -- // Create a handler local Handler = CommandHandler . new ({ Prefix = \".\" }) -- // Create a command CommandClass . new ({ Name = { \"stringtest\" }, Description = \"Test\" , ArgParse = { \"string\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"booleantest\" }, Description = \"Test\" , ArgParse = { \"boolean\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"numbertest\" }, Description = \"Test\" , ArgParse = { \"number\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"colorrgbtest\" }, Description = \"Test\" , ArgParse = { \"colorrgb\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"playertest\" }, Description = \"Test\" , ArgParse = { \"player\" }, TargetSeperator = \",\" Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"misctest\" }, Description = \"Test\" , ArgParse = { \"fdsfiuhdsji\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) -- // Handler : StartChatListen ()","title":"Example"}]}