{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is this? This is a developer resource that helps you make chat commands easily while allowing rigid typings. This uses classes Sometimes you may see the parameter self . This does not mean you have to always put self there, you can do Object:Function(...) instead of Object.Function(Object, ...) Source The source can be found here","title":"Home"},{"location":"#what-is-this","text":"This is a developer resource that helps you make chat commands easily while allowing rigid typings. This uses classes Sometimes you may see the parameter self . This does not mean you have to always put self there, you can do Object:Function(...) instead of Object.Function(Object, ...)","title":"What is this?"},{"location":"#source","text":"The source can be found here","title":"Source"},{"location":"APIReference/Command/checkuser/","text":"CommandClass.CheckUser << boolean > Allowed > CommandClass . CheckUser ( < CommandClass > self , < Player > User ) Check if a user is whitelisted/blacklisted Parameters CommandClass Command The command Player User The user to check against Returns boolean Allowed Whether the user has passed the check and is authorised. Source","title":"CheckUser"},{"location":"APIReference/Command/checkuser/#commandclasscheckuser","text":"<< boolean > Allowed > CommandClass . CheckUser ( < CommandClass > self , < Player > User ) Check if a user is whitelisted/blacklisted","title":"CommandClass.CheckUser"},{"location":"APIReference/Command/checkuser/#parameters","text":"CommandClass Command The command Player User The user to check against","title":"Parameters"},{"location":"APIReference/Command/checkuser/#returns","text":"boolean Allowed Whether the user has passed the check and is authorised. Source","title":"Returns"},{"location":"APIReference/Command/constructor/","text":"CommandClass.new << CommandClass > Command > CommandClass . new ( < CommandClassData > Data ) You use this to create a new command instance Parameters CommandClassData Data There is a lot of things you may configure, see below Name Description Type Default Required Active This is currently not working / not implemented boolean true NO Members These are the allowed/disallowed players Player[] {LocalPlayer} NO MemberType Can either be Whitelist or Blacklist string Whitelist NO ArgSeperator This is what seperates each argument out string NO TargetSeperator This is what seperates each target out string nil NO Callback This function is called when the command is function empty func NO Description The description of the command - useless atm string NO Handler The handler this command is registered to CommandHandler NO Name The name of the command string/string[] YES Note The callback back gets passed the ExecutePlayer, Arguments arguments. If the handler is specified, it is automatically registered to that command Returns CommandClass Command The created command Source","title":"Constructor"},{"location":"APIReference/Command/constructor/#commandclassnew","text":"<< CommandClass > Command > CommandClass . new ( < CommandClassData > Data ) You use this to create a new command instance","title":"CommandClass.new"},{"location":"APIReference/Command/constructor/#parameters","text":"CommandClassData Data There is a lot of things you may configure, see below Name Description Type Default Required Active This is currently not working / not implemented boolean true NO Members These are the allowed/disallowed players Player[] {LocalPlayer} NO MemberType Can either be Whitelist or Blacklist string Whitelist NO ArgSeperator This is what seperates each argument out string NO TargetSeperator This is what seperates each target out string nil NO Callback This function is called when the command is function empty func NO Description The description of the command - useless atm string NO Handler The handler this command is registered to CommandHandler NO Name The name of the command string/string[] YES Note The callback back gets passed the ExecutePlayer, Arguments arguments. If the handler is specified, it is automatically registered to that command","title":"Parameters"},{"location":"APIReference/Command/constructor/#returns","text":"CommandClass Command The created command Source","title":"Returns"},{"location":"APIReference/Command/parsearguments/","text":"CommandClass.ParseArguments << any > Arguments > CommandClass . ParseArguments ( < CommandClass > self , < Player > ExecutePlayer , < string [] > Arguments ) This converts a string[] (string array) of arguments into an array of typed arguments. This means a number argument becomes a number, etc. Parameters CommandClass Command The command Player ExecutePlayer The player who executed the command string[] Arguments The string array of arguments, usually the stuff after the command has been said but all chopped up. e.g. :particle me red -> [\"me\", \"red\"] Returns any Arguments The parsed arguments with types Source","title":"ParseArguments"},{"location":"APIReference/Command/parsearguments/#commandclassparsearguments","text":"<< any > Arguments > CommandClass . ParseArguments ( < CommandClass > self , < Player > ExecutePlayer , < string [] > Arguments ) This converts a string[] (string array) of arguments into an array of typed arguments. This means a number argument becomes a number, etc.","title":"CommandClass.ParseArguments"},{"location":"APIReference/Command/parsearguments/#parameters","text":"CommandClass Command The command Player ExecutePlayer The player who executed the command string[] Arguments The string array of arguments, usually the stuff after the command has been said but all chopped up. e.g. :particle me red -> [\"me\", \"red\"]","title":"Parameters"},{"location":"APIReference/Command/parsearguments/#returns","text":"any Arguments The parsed arguments with types Source","title":"Returns"},{"location":"APIReference/Command/parseplayertype/","text":"CommandClass.ParsePlayerType << Player [] > Target > CommandClass . ParsePlayerType ( < string > Argument , < Player > ExecutePlayer ) This converts a target player into an array containing all of the targets. Note This is used within CommandClass.ParseType Parameters string Argument The target, e.g. all , others , random , me , or the partial spelling of a username Player ExecutePlayer The player who executed the command Returns Player[] Target An array of player instances (targets) Source","title":"ParsePlayerType"},{"location":"APIReference/Command/parseplayertype/#commandclassparseplayertype","text":"<< Player [] > Target > CommandClass . ParsePlayerType ( < string > Argument , < Player > ExecutePlayer ) This converts a target player into an array containing all of the targets. Note This is used within CommandClass.ParseType","title":"CommandClass.ParsePlayerType"},{"location":"APIReference/Command/parseplayertype/#parameters","text":"string Argument The target, e.g. all , others , random , me , or the partial spelling of a username Player ExecutePlayer The player who executed the command","title":"Parameters"},{"location":"APIReference/Command/parseplayertype/#returns","text":"Player[] Target An array of player instances (targets) Source","title":"Returns"},{"location":"APIReference/Command/parsetype/","text":"CommandClass.ParseType << any > Argument > CommandClass . ParseType ( < Player > ExecutePlayer , < string > Argument , < string > Type ) This converts an argument to the Type, e.g. to a number, boolean, etc. Note This is used within CommandClass.ParseArguments Parameters Player ExecutePlayer The player who executed the command string Argument The argument lol string Type The type of argument to parse to. This can be one of the following: - string - any - boolean - number - colorrgb (rrrgggbbb is the format, e.g. 001255255) - player Returns any Argument The parsed argument Source","title":"ParseType"},{"location":"APIReference/Command/parsetype/#commandclassparsetype","text":"<< any > Argument > CommandClass . ParseType ( < Player > ExecutePlayer , < string > Argument , < string > Type ) This converts an argument to the Type, e.g. to a number, boolean, etc. Note This is used within CommandClass.ParseArguments","title":"CommandClass.ParseType"},{"location":"APIReference/Command/parsetype/#parameters","text":"Player ExecutePlayer The player who executed the command string Argument The argument lol string Type The type of argument to parse to. This can be one of the following: - string - any - boolean - number - colorrgb (rrrgggbbb is the format, e.g. 001255255) - player","title":"Parameters"},{"location":"APIReference/Command/parsetype/#returns","text":"any Argument The parsed argument Source","title":"Returns"},{"location":"APIReference/Handler/add/","text":"CommandHandler.AddCommand << nil > nil > CommandHandler . AddCommand ( < CommandHandler > self , < Command > Command ) You use this to register a command to the handler Parameters CommandHandler Handler The command handler you wish to register the command to Command Command The command to register Returns nil nil Source","title":"AddCommand"},{"location":"APIReference/Handler/add/#commandhandleraddcommand","text":"<< nil > nil > CommandHandler . AddCommand ( < CommandHandler > self , < Command > Command ) You use this to register a command to the handler","title":"CommandHandler.AddCommand"},{"location":"APIReference/Handler/add/#parameters","text":"CommandHandler Handler The command handler you wish to register the command to Command Command The command to register","title":"Parameters"},{"location":"APIReference/Handler/add/#returns","text":"nil nil Source","title":"Returns"},{"location":"APIReference/Handler/chatlisten/","text":"CommandHandler.StartChatListen << nil > nil > CommandHandler . StartChatListen ( < CommandHandler > self ) This starts the handler. It listens to every message chatted by every user and executes a command if they said one. How this works It passes the message to CommandHandler.Execute Parameters CommandHandler Handler The command handler Returns nil nil Source","title":"StartChatListen"},{"location":"APIReference/Handler/chatlisten/#commandhandlerstartchatlisten","text":"<< nil > nil > CommandHandler . StartChatListen ( < CommandHandler > self ) This starts the handler. It listens to every message chatted by every user and executes a command if they said one. How this works It passes the message to CommandHandler.Execute","title":"CommandHandler.StartChatListen"},{"location":"APIReference/Handler/chatlisten/#parameters","text":"CommandHandler Handler The command handler","title":"Parameters"},{"location":"APIReference/Handler/chatlisten/#returns","text":"nil nil Source","title":"Returns"},{"location":"APIReference/Handler/checkuser/","text":"CommandHandler.CheckUser << boolean > Allowed > CommandHandler . CheckUser ( < CommandHandler > self , < Player > User ) Check if a user is whitelisted/blacklisted Parameters CommandHandler Handler The command handler Player User The user to check against Returns boolean Allowed Whether the user has passed the check and is authorised. Source","title":"CheckUser"},{"location":"APIReference/Handler/checkuser/#commandhandlercheckuser","text":"<< boolean > Allowed > CommandHandler . CheckUser ( < CommandHandler > self , < Player > User ) Check if a user is whitelisted/blacklisted","title":"CommandHandler.CheckUser"},{"location":"APIReference/Handler/checkuser/#parameters","text":"CommandHandler Handler The command handler Player User The user to check against","title":"Parameters"},{"location":"APIReference/Handler/checkuser/#returns","text":"boolean Allowed Whether the user has passed the check and is authorised. Source","title":"Returns"},{"location":"APIReference/Handler/constructor/","text":"CommandHandler.new << CommandHandler > Handler > CommandHandler . new ( < CommandHandlerData > Data ) You use this to create a new command handler instance Parameters CommandHandlerData Data There is a lot of things you may configure, see below Name Description Type Default Required Members These are the allowed/disallowed players Player[] {LocalPlayer} NO MemberType Can either be Whitelist or Blacklist string Whitelist NO ArgSeperator This is what seperates each argument out string NO Commands Holds all of the commands registered to this handler Command[] {} NO Prefix What the command has to start with in order to be one string/string[] ! NO Returns CommandHandler Handler The created handler Source","title":"Constructor"},{"location":"APIReference/Handler/constructor/#commandhandlernew","text":"<< CommandHandler > Handler > CommandHandler . new ( < CommandHandlerData > Data ) You use this to create a new command handler instance","title":"CommandHandler.new"},{"location":"APIReference/Handler/constructor/#parameters","text":"CommandHandlerData Data There is a lot of things you may configure, see below Name Description Type Default Required Members These are the allowed/disallowed players Player[] {LocalPlayer} NO MemberType Can either be Whitelist or Blacklist string Whitelist NO ArgSeperator This is what seperates each argument out string NO Commands Holds all of the commands registered to this handler Command[] {} NO Prefix What the command has to start with in order to be one string/string[] ! NO","title":"Parameters"},{"location":"APIReference/Handler/constructor/#returns","text":"CommandHandler Handler The created handler Source","title":"Returns"},{"location":"APIReference/Handler/execute/","text":"CommandHandler.Execute << nil > nil > CommandHandler . Execute ( < CommandHandler > self , < Player > ExecutePlayer , < string > Message ) Execute a command Parameters CommandHandler Handler The command handler Player ExecutePlayer The player who executed the command string Message The message the player said Returns nil nil Source","title":"Execute"},{"location":"APIReference/Handler/execute/#commandhandlerexecute","text":"<< nil > nil > CommandHandler . Execute ( < CommandHandler > self , < Player > ExecutePlayer , < string > Message ) Execute a command","title":"CommandHandler.Execute"},{"location":"APIReference/Handler/execute/#parameters","text":"CommandHandler Handler The command handler Player ExecutePlayer The player who executed the command string Message The message the player said","title":"Parameters"},{"location":"APIReference/Handler/execute/#returns","text":"nil nil Source","title":"Returns"},{"location":"APIReference/Handler/helpmenu/","text":"CommandHandler.HelpMenu << string > HelpMenu > CommandHandler . HelpMenu ( < CommandHandler > self ) This generates a help menu you can use. Here is an example output: :kill :m :h Parameters CommandHandler Handler The command handler Returns string HelpMenu Explained above Source","title":"HelpMenu"},{"location":"APIReference/Handler/helpmenu/#commandhandlerhelpmenu","text":"<< string > HelpMenu > CommandHandler . HelpMenu ( < CommandHandler > self ) This generates a help menu you can use. Here is an example output: :kill :m :h","title":"CommandHandler.HelpMenu"},{"location":"APIReference/Handler/helpmenu/#parameters","text":"CommandHandler Handler The command handler","title":"Parameters"},{"location":"APIReference/Handler/helpmenu/#returns","text":"string HelpMenu Explained above Source","title":"Returns"},{"location":"Examples/","text":"Example Test This is what I use to test the script is working. -- // Dependencies local CommandHandler , CommandClass = loadstring ( game : HttpGet ( \"https://raw.githubusercontent.com/Stefanuk12/ROBLOX/master/Universal/Commands/Module.lua\" ))() -- // Create a handler local Handler = CommandHandler . new ({ Prefix = \".\" }) -- // Create a command CommandClass . new ({ Name = { \"stringtest\" }, Description = \"Test\" , ArgParse = { \"string\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"booleantest\" }, Description = \"Test\" , ArgParse = { \"boolean\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"numbertest\" }, Description = \"Test\" , ArgParse = { \"number\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"colorrgbtest\" }, Description = \"Test\" , ArgParse = { \"colorrgb\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"playertest\" }, Description = \"Test\" , ArgParse = { \"player\" }, TargetSeperator = \",\" Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"misctest\" }, Description = \"Test\" , ArgParse = { \"fdsfiuhdsji\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) -- // Handler : StartChatListen ()","title":"Index"},{"location":"Examples/#example","text":"Test This is what I use to test the script is working. -- // Dependencies local CommandHandler , CommandClass = loadstring ( game : HttpGet ( \"https://raw.githubusercontent.com/Stefanuk12/ROBLOX/master/Universal/Commands/Module.lua\" ))() -- // Create a handler local Handler = CommandHandler . new ({ Prefix = \".\" }) -- // Create a command CommandClass . new ({ Name = { \"stringtest\" }, Description = \"Test\" , ArgParse = { \"string\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"booleantest\" }, Description = \"Test\" , ArgParse = { \"boolean\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"numbertest\" }, Description = \"Test\" , ArgParse = { \"number\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"colorrgbtest\" }, Description = \"Test\" , ArgParse = { \"colorrgb\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"playertest\" }, Description = \"Test\" , ArgParse = { \"player\" }, TargetSeperator = \",\" Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) CommandClass . new ({ Name = { \"misctest\" }, Description = \"Test\" , ArgParse = { \"fdsfiuhdsji\" }, Handler = Handler , Callback = function ( ExecutePlayer , Arguments ) warn ( Arguments [ 1 ], typeof ( Arguments [ 1 ])) end }) -- // Handler : StartChatListen ()","title":"Example"}]}